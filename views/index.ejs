<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= title %>
    </title>
    <link rel="stylesheet" href="/css/styles.css">
    <style>
        .auto-play-controls {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

        .auto-play-controls button {
            margin: 0 5px;
            padding: 10px 15px;
            font-size: 16px;
            cursor: pointer;
        }

        #intervalDisplay {
            font-size: 16px;
            margin: 0 10px;
        }

        .mobile-buttons {
            display: none;
            justify-content: center;
            flex-direction: row;
        }

        .mobile-button {
            flex-grow: 1;
            padding-top: 20px;
            padding-bottom: 20px;
            cursor: pointer;
            box-shadow: -20px 20px 60px #bebebe,
                20px -20px 60px #ffffff;
            border: none;
            background: #e0e0e0;
            border-radius: 5px;
        }


        @media screen and (max-width: 768px) {
            .mobile-buttons {
                display: flex;
            }
        }
    </style>
</head>

<body>
    <h1 class="title1">
        <!-- <%= title %> -->
    </h1>

    <div id="flash-card-container">
        <% data.forEach((card, index)=> { %>

            <div class="flash-card" id="card-<%= index %>" data-optional-notes="<%= card[2] %>"
                end-of-deck="<%= (card[0] == null)%>">
                <div class="front">
                    <h1>
                        <%= card[0] %>
                    </h1>
                </div>
                <div class="back" style="display:none;">
                    <h1>
                        <%= card[1] %>
                    </h1>
                </div>
                <% if (card[3]) { %>
                    <% const audioSources=card[3].split(',').map(src=> src.trim()); %>
                        <% audioSources.forEach((src, audioIndex)=> { %>
                            <audio id="audio-<%= index %>-<%= audioIndex %>" src="<%= src %>"></audio>
                            <% }); %>
                                <% } %>
            </div>
            <% }) %>
    </div>

    <!-- Mobile buttons -->
    <div class="mobile-buttons">
        <button class="mobile-button" id="hideButton">Hide</button>
        <button class="mobile-button" id="prevButton">LEFT</button>
        <button class="mobile-button" id="flipButton">Flip</button>
        <button class="mobile-button" id="nextButton">RIGHT</button>
    </div>

    <div class="card-counter" id="card-counter">1/<%= data.length %>
    </div>

    <!-- Volume control slider -->
    <div class="volume-control">
        <label for="volume-slider" class="gray-text">Volume: </label>
        <input type="range" id="volume-slider" class="gray-slider" min="0" max="1" step="0.01" value="1">
    </div>

    <div class="deck-counter" id="deck-counter"></div>
    <button class="mobile-button" id="prevDeckButton">Prev Deck</button>
    <button class="mobile-button" id="nextDeckButton">Next Deck</button>

    <div class="auto-play-controls">
        <button id="playPauseButton">Play</button>
        <button id="decreaseIntervalButton">-</button>
        <span id="intervalDisplay">3s</span>
        <button id="increaseIntervalButton">+</button>
    </div>


    <script>

        // Add these variables at the beginning of your script

        let decks = [];
        let currentDeckIndex = 0;

        let currentCardIndex = 0;
        let activeCards = [];

        const cardCounter = document.getElementById('card-counter');
        const cards = document.querySelectorAll('.flash-card');

        const savedVolume = localStorage.getItem('volume') || 1;
        const volumeSlider = document.getElementById('volume-slider');

        // Set the initial value of the volume slider
        volumeSlider.value = savedVolume;

        let isPlaying = false;
        let playInterval;
        let intervalTime = 3000; // 3 seconds default

        const playPauseButton = document.getElementById('playPauseButton');
        const decreaseIntervalButton = document.getElementById('decreaseIntervalButton');
        const increaseIntervalButton = document.getElementById('increaseIntervalButton');
        const intervalDisplay = document.getElementById('intervalDisplay');


        function initializeCards() {
            let currentDeck = [];
            cards.forEach(card => {
                if (card.getAttribute('end-of-deck') === 'true') {
                    if (currentDeck.length > 0) {
                        decks.push(currentDeck);
                        currentDeck = [];
                    }
                } else {
                    const optionalNotes = card.dataset.optionalNotes;
                    if (optionalNotes !== '1') {
                        currentDeck.push(card);
                    }
                }
            });
            if (currentDeck.length > 0) {
                decks.push(currentDeck);
            }
            activeCards = decks[currentDeckIndex];
            updateCardCounter(0);
            updateDeckCounter();
        }
        function nextDeck() {
            if (currentDeckIndex < decks.length - 1) {
                currentDeckIndex++;
                activeCards = decks[currentDeckIndex];
                currentCardIndex = 0;
                showCard(currentCardIndex);
                updateDeckCounter();
            }
        }

        function prevDeck() {
            if (currentDeckIndex > 0) {
                currentDeckIndex--;
                activeCards = decks[currentDeckIndex];
                currentCardIndex = 0;
                showCard(currentCardIndex);
                updateDeckCounter();
            }
        }

        function updateDeckCounter() {
            const deckCounter = document.getElementById('deck-counter');
            deckCounter.textContent = `Deck ${currentDeckIndex + 1}/${decks.length}`;
        }
        function showCard(index) {
            if (activeCards.length === 0) {
                cardCounter.textContent = "No cards in this deck";
                return;
            }

            // Remove 'active' class from all cards in all decks
            cards.forEach(card => {
                card.classList.remove('active');
            });

            // Add 'active' class only to the current card
            activeCards[index].classList.add('active');

            // Reset display of front and back for all cards
            activeCards.forEach(card => {
                card.querySelector('.front').style.display = 'block';
                card.querySelector('.back').style.display = 'none';
            });

            updateCardCounter(index);
            if (isPlaying) {
                playSound(index);
            }
        }

        function flipCard() {
            const currentCard = activeCards[currentCardIndex];
            const front = currentCard.querySelector('.front');
            const back = currentCard.querySelector('.back');
            if (front.style.display === 'none') {
                front.style.display = 'block';
                back.style.display = 'none';
            } else {
                front.style.display = 'none';
                back.style.display = 'block';
            }
        }

        function nextCard() {
            currentCardIndex++;
            if (currentCardIndex >= activeCards.length) {
                // Reset to the first card of the current deck
                currentCardIndex = 0;
            }
            showCard(currentCardIndex);
        }

        function prevCard() {
            currentCardIndex--;
            if (currentCardIndex < 0) {
                // Loop back to the last card of the current deck
                currentCardIndex = activeCards.length - 1;
            }
            showCard(currentCardIndex);
        }


        function updateCardCounter(index) {
            cardCounter.textContent = `${index + 1}/${activeCards.length}`;
        }

        function playSound(index) {
            const card = activeCards[index];
            const audioElements = card.querySelectorAll('audio');
            if (audioElements.length > 0) {
                const randomIndex = Math.floor(Math.random() * audioElements.length);
                const selectedAudio = audioElements[randomIndex];
                selectedAudio.volume = volumeSlider.value;
                selectedAudio.play();
            }
        }

        function updateVolume() {
            const volume = volumeSlider.value;
            document.querySelectorAll('audio').forEach(audio => {
                audio.volume = volume;
            });
            localStorage.setItem('volume', volume);
        }

        async function hideCard() {
            if (activeCards.length > 1) {
                const currentCard = activeCards[currentCardIndex];
                const word = currentCard.querySelector('.front h1').textContent;

                // Show confirmation alert
                const confirmHide = confirm(`Are you sure you want to hide the card for "${word}"?`);

                if (confirmHide) {
                    try {
                        // Inform the server to mark the word as learned
                        const response = await fetch('/mark-learned', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ word }),
                        });

                        if (!response.ok) {
                            throw new Error('Failed to mark word as learned');
                        }

                        // Remove the card from the active cards
                        activeCards[currentCardIndex].style.display = 'none';
                        activeCards.splice(currentCardIndex, 1);

                        if (currentCardIndex >= activeCards.length) {
                            currentCardIndex = 0;
                        }

                        showCard(currentCardIndex);
                        alert(`The card for "${word}" has been hidden.`);
                    } catch (error) {
                        console.error('Error:', error);
                        alert('An error occurred while trying to hide the card. Please try again.');
                    }
                }
            } else {
                alert('This is the last card. You cannot hide it.');
            }
        }

        function togglePlay() {
            if (isPlaying) {
                stopAutoPlay();
            } else {
                startAutoPlay();
            }
        }

        function startAutoPlay() {
            isPlaying = true;
            playPauseButton.textContent = 'Stop';
            playInterval = setInterval(() => {
                // playSound(currentCardIndex);
                nextCard();
            }, intervalTime);
        }

        function stopAutoPlay() {
            isPlaying = false;
            playPauseButton.textContent = 'Play';
            clearInterval(playInterval);
        }

        function updateIntervalDisplay() {
            intervalDisplay.textContent = `${intervalTime / 1000}s`;
        }

        function increaseInterval() {
            intervalTime += 1000;
            updateIntervalDisplay();
            if (isPlaying) {
                stopAutoPlay();
                startAutoPlay();
            }
        }

        function decreaseInterval() {
            if (intervalTime > 1000) {
                intervalTime -= 1000;
                updateIntervalDisplay();
                if (isPlaying) {
                    stopAutoPlay();
                    startAutoPlay();
                }
            }
        }


        document.addEventListener('keydown', (event) => {
            if (event.key === '5') {
                flipCard();
            } else if (event.key === '6') {
                nextCard();
            } else if (event.key === '4') {
                prevCard();
            } else if (event.key === '8') {
                hideCard();
            }
        });

        // Mobile button event listeners
        document.getElementById('flipButton').addEventListener('click', flipCard);
        document.getElementById('nextButton').addEventListener('click', nextCard);
        document.getElementById('prevButton').addEventListener('click', prevCard);
        document.getElementById('hideButton').addEventListener('click', hideCard);
        document.getElementById('nextDeckButton').addEventListener('click', nextDeck);
        document.getElementById('prevDeckButton').addEventListener('click', prevDeck);

        playPauseButton.addEventListener('click', togglePlay);
        decreaseIntervalButton.addEventListener('click', decreaseInterval);
        increaseIntervalButton.addEventListener('click', increaseInterval);

        // Call updateVolume initially to set the correct volume
        updateVolume();

        volumeSlider.addEventListener('input', updateVolume);

        // Initial display of the first card
        initializeCards();
        showCard(currentCardIndex);

    </script>
</body>

</html>